using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Matrix.NET.Client.Requests;
using Matrix.NET.Client.Responses;
using Matrix.NET.Models;
using Matrix.NET.Models.Requests;
using Matrix.NET.Models.Responses;

namespace Matrix.NET.Client
{
    public interface IMatrixClient
    {
        string HomeserverUrl { get; }

        string AccessToken { get; set; }

        bool ShouldValidateRequests { get; set; }

        (bool IsValid, IEnumerable<ValidationResult> ValidationResults) TryValidateRquest<TResponse>(
            IRequest<TResponse> request)
            where TResponse : IResponse;

        Task<TResponse> MakeRequestAsync<TResponse>(IRequest<TResponse> request)
            where TResponse : IResponse;

        Task<TResponse> MakeRequestAsync<TResponse>
            (IRequest<TResponse> request, bool requiresSuccessStatusCode, params Type[] responseTypes)
            where TResponse : class, IResponse;

        #region 2. API Standards

        Task<string[]> GetVersionsAsync();

        #endregion

        #region 3. Client Authentication

        /// <summary>
        /// Register for an account on this homeserver.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        /// <remarks>
        /// There are two kinds of user account:
        ///  - user accounts.These accounts may use the full API described in this specification.
        ///  - guest accounts. These accounts may have limited permissions and may not be supported by all servers.
        /// If registration is successful, this endpoint will issue an access token the client can use to authorize itself in subsequent requests.
        /// If the client does not supply a device_id, the server must auto-generate one.
        /// The returned access token must be associated with the device_id supplied by the client or generated by the server.The server may 
        /// invalidate any access token previously associated with that device. See Relationship between access tokens and devices.
        /// </remarks>
        Task<UserInteractiveAuthResponseBase> RegisterAsync<TAuth>(RegisterRequest<TAuth> request)
            where TAuth : AuthenticationDataBase;

        Task<LoginResponse> LoginAsync(LoginRequest request);

        Task LogoutAsync();

        #endregion

        #region 6. Events

        Task<string> SendMessageEventAsync(MessageEventRequestBase messageEventRequest);

        #endregion

        #region 7. Rooms

        Task<string> CreateRoomAsync();
        
        Task<string> CreateRoomAsync(CreateRoomRequest request);

        Task<PublicRoomsResponse> GetPublicRoomsAsync();

        #endregion

        #region 11. Modules

        #region 11.7 Content Repository

        Task<string> UploadMediaAsync(MediaUploadRequest request);

        #endregion

        #endregion
    }
}